#pragma kernel Simulate
#pragma kernel Emit
#pragma kernel Precompute
#include "SNoise.hlsl"
#define WIDTH 8
#define N 64
#define EPSILON 1e-3
#define USE_SPHERE


static const float4 Dx = float4(EPSILON, 0, 0, 0);
static const float4 Dy = float4(0, EPSILON, 0, 0);
static const float4 DeathPos = float4(1000, 0, 0, 0);

struct Particle {
	float2 x;
	float t;
	float life;
};

float Dt;
float CurlSpeed;
float FlowSpeed;
float Time;
float4 GeoSize;
float Geo2Noise;
float4 Pix2Noise;
float4 Geo2UV;

StructuredBuffer<float4> Spheres;
StructuredBuffer<Particle> ParticleIn;
RWStructuredBuffer<Particle> ParticleOut;

StructuredBuffer<int> EmitIndices;
StructuredBuffer<Particle> EmitParticles;

SamplerState samplerPotTexIn;
Texture2D<float> PotTexIn;
RWTexture2D<float> PotTexOut;
SamplerState samplerFlowTex;
Texture2D<float4> FlowTex;


float Ramp(float r) {
	if (r >= 1.0)
		return 1.0;
	else if (r <= -1.0)
		return -1.0;
	
	float r3 = r * r * r;
	float r5 = r3 * r * r;
	return (15.0 * r - 10.0 * r3 + 3.0 * r5) * 0.125;
}
float Dist2Sphere(float2 x, float4 sphere) {
	float2 v = x - sphere.xy;
	return length(v) - sphere.w;
}
float2 ClosestOnSphere(float2 x, float4 sphere, out float dist, out float2 n) {
	float2 v = x - sphere.xy;
	dist = length(v) - sphere.w;
	n = normalize(v);
	return sphere.w * n + sphere.xy;
}
float Pot(float2 x) {
	float r = 1.0;

	#ifdef USE_SPHERE
	uint nSpheres = 0;
	uint stride = 0;
	Spheres.GetDimensions(nSpheres, stride);
	for (uint i = 0; i < nSpheres; i++) {
		float4 sph = Spheres[i];
		if (sph.w < EPSILON)
			continue;
		float dist = Dist2Sphere(x, sph);
		r *= Ramp(dist * Geo2Noise);
	}
	#endif
	
	float2 uv = x * Geo2UV.xy;
	float p = PotTexIn.SampleLevel(samplerPotTexIn, uv, 0);
	return r * p;
}
float2 Curl(float2 x) {
	float dpdx = Pot(x + Dx.xy) - Pot(x - Dx.xy);
	float dpdy = Pot(x + Dy.xy) - Pot(x - Dy.xy);
	return float2(dpdy, -dpdx) / (2.0 * EPSILON * Geo2Noise);
}
float2 Constraint(float2 x) {
	#ifdef USE_SPHERE
	uint nSpheres = 0;
	uint stride = 0;
	Spheres.GetDimensions(nSpheres, stride);
	
	for (uint i = 0; i < nSpheres; i++) {
		float4 sph = Spheres[i];
		if (sph.w < EPSILON)
			continue;
		float dist = 0.0;
		float2 n = 0.0;
		float2 closest = ClosestOnSphere(x, sph, dist, n);
		if (dist < 0.0)
			x = closest;
	}
	#endif
	
	x = clamp(x, 0, GeoSize.xy);
	
	return x;
}



[numthreads(N,1,1)]
void Simulate(uint3 id : SV_DispatchThreadID) {
	Particle p = ParticleIn[id.x];
	if (p.t < p.life) {
		float2 uv = p.x * Geo2UV.xy;
		float2 n = 2.0 * FlowTex.SampleLevel(samplerFlowTex, uv, 0).wy - 1.0;
		p.t += Dt;
		p.x += (CurlSpeed * Curl(p.x) + FlowSpeed * n) * Dt;
		p.x = Constraint(p.x);
	} else {
		p.x = DeathPos.xy;
	}
    ParticleOut[id.x] = p;
}
[numthreads(WIDTH,WIDTH,1)]
void Precompute(uint3 id : SV_DispatchThreadID) {
	float3 xt = float3((id.xy + 0.5) * Pix2Noise.xy, Time);
	PotTexOut[id.xy] = snoise(xt);
}
[numthreads(N,1,1)]
void Emit(uint3 id : SV_DispatchThreadID) {
	int i = EmitIndices[id.x];
	if (i >= 0)
		ParticleOut[i] = EmitParticles[id.x];
}
